클라이언트앱
모바일앱
웹앱
데스크탑앱(카카오톡 줌 등)

서버
	소켓 통신으로 구현할 경우 전부 다 새로 만든다
	http 통신으로 구현할 경우 웹서버를 이용한다 (REST API 서버)

클라이언트와 서버의 통신 구현 기술
	소켓 통신(구현하기 어렵지만 가볍고 성능이 좋음)
 	HTTP 통신(무겁지만 구현하기 편하다)


일반적으로 컨트롤러 어노테이션은 뷰를 리턴

Request Parameter의 포멧
 	x-www-form-urlencoded

ex name=tom&age=17&srchTet=홍길동(한글처럼 보이지만 한글이 아님->%ED%99%8D%EA%B8%B8%EB%8F%99 이 값임)


복잡한 데이터를 보낼 떄는
JSON 포멧을 주로 보냄



6) Request Method
클라이언트가 서버에 요청(request)을 전달하는 방식(method)을 request method 라고 한다.
지금까지 우리가 사용한 request method는 GET, POST 둘 뿐이다.

그런데 GET, POST 뿐만 아니라 DELETE, PUT 도 있다.

REST API 서비스를 구현할 때, request method 들을 전부 잘 활용하는 것이 바람직하다. (관례이다)

서버에 데이터를 요청할 때는 GET 방식
서버에 저장할 새 데이터를 전송할 때는 POST 방식
서버의 기존 데이터를 수정하기 위해 전송할 때는 PUT 방식
서버의 데이터 삭제를 요청할 때는 DELETE 방식을 사용한다.



7) REST API URL 패턴

query string 사용하지 않기
REST API 서비스의 URL에 query string을 사용하지 않는 것이 관례이다.

예를 들어 아래 URL은 바람직하지 않다.
http://localhost:8080/studentServer/api/student?id=3

아래와 같은 형태이어야 한다.
http://localhost:8080/studentServer/api/student/3
Request Method = GET

동사 사용하지 않기
REST API 서비스의 URL에 동사를 사용하지 않는 것이 관례이다.

예를 들어 아래 URL은 바람직하지 않다.
http://localhost:8080/studentServer/studentDelete?id=3

아래와 같은 형태이어야 한다.
http://localhost:8080/studentServer/api/student/3
Request Method = DELETE




Mybatis

    5.view
    4.contorller
    3. Service
    2.DAO
    1.mybais mapper

1->2 DTO
2->3 DTO
3->4 DTO ,Model
4>-5 DTO  Model
5->4 Model


JPA

    5.view
    4.contorller
    3. Service
    2.DAO
    1.JPA Repository

1->2 Entity
2->3 DTO
3->4 DTO ,Model
4>-5 DTO  Model




학생 테이블의 primary key
학번

주민등록번호

201032015

primary key->surrogate key

	int id; auto increment->일반적

	GUID; 3f2a 691b->유니크함


Optional<Department> findById(int id)
이렇게 구현하고

Department findById(int id) 로 구현하지 않는 이유?


null을 return할 수 있기 때문에
절대로 null을 리턴하지 않고 반드시 Department객체를 리턴하면 아래 코드를 써도 좋음
null이 들어있을 수도 있으면 Optional에 씌우는 게 바람직함